generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Person {
  id             String           @id @default(cuid())
  organizationId String
  fullName       String
  email          String?
  phone          String?
  streetAddress  String?
  city           String?
  state          String?
  postalCode     String?
  gender         String
  ageRange       String
  birthdate      String?
  maritalStatus  String?
  anniversary    String?
  joinDate       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Household      Household?       @relation(fields: [householdId], references: [id])
  householdId    String?
  primaryFor     Household?       @relation("PrimaryContact")
  lists          PeopleInLists[]
  groups         PeopleInGroups[]
  donations      Donation[]

  @@map(name: "people")
}

model Household {
  id               String   @id @default(cuid())
  organizationId   String
  name             String
  people           Person[]
  primaryContact   Person?  @relation("PrimaryContact", fields: [primaryContactId], references: [id], onDelete: SetNull)
  primaryContactId String?  @unique

  @@map(name: "households")
}

model List {
  id             String          @id @default(cuid())
  organizationId String
  name           String
  people         PeopleInLists[]

  @@map(name: "lists")
}

model Group {
  id             String           @id @default(cuid())
  organizationId String
  name           String
  people         PeopleInGroups[]

  @@map(name: "groups")
}

model PeopleInLists {
  Person     Person?  @relation(fields: [personId], references: [id])
  personId   String
  List       List?    @relation(fields: [listId], references: [id])
  listId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([personId, listId])
}

model PeopleInGroups {
  Person     Person?  @relation(fields: [personId], references: [id])
  personId   String
  Group      Group?   @relation(fields: [groupId], references: [id])
  groupId    String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([personId, groupId])
}

model Donation {
  id             String   @id @default(cuid())
  organizationId String
  date           String
  amount         Decimal  @db.Money
  fund           String
  Person         Person?  @relation(fields: [personId], references: [id])
  personId       String?
  createdAt      DateTime @default(now())
  loggedBy       String

  @@map(name: "donations")
}
